# Multi-stage build for ARM64
FROM rust:latest AS builder

# Install ARM64-specific dependencies with compatibility handling
RUN apt-get update && \
    # Try to install the newer package names first, fallback to older ones
    (apt-get install -y libasound2-dev || apt-get install -y libasound2t64-dev || true) && \
    apt-get install -y \
    libwebkit2gtk-4.1-dev \
    build-essential \
    curl \
    wget \
    file \
    libssl-dev \
    libgtk-3-dev \
    libayatana-appindicator3-dev \
    librsvg2-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for frontend build
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs

# Add ARM64 Rust target
RUN rustup target add aarch64-unknown-linux-gnu

# Install Tauri CLI
RUN cargo install tauri-cli

# Set working directory
WORKDIR /app

# Copy source files
COPY . .

# Install frontend dependencies
RUN npm install

# Build the application (skip AppImage for ARM64)
ENV NO_STRIP=true
RUN npx tauri build --target aarch64-unknown-linux-gnu -- --no-default-features

# Debug: List the output directory to find the correct binary name
RUN ls -la /app/src-tauri/target/aarch64-unknown-linux-gnu/release/

# Runtime stage
FROM ubuntu:24.04

# Install runtime dependencies with compatibility handling
RUN apt-get update && \
    apt-get install -y \
    libwebkit2gtk-4.1-0 \
    libgtk-3-0 \
    libayatana-appindicator3-1 \
    librsvg2-2 \
    libasound2t64 \
    libgstreamer1.0-0 \
    libgstreamer-plugins-base1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    && rm -rf /var/lib/apt/lists/*

# Copy built application (use the correct binary name - RapidRAW with capital letters)
COPY --from=builder /app/src-tauri/target/aarch64-unknown-linux-gnu/release/RapidRAW /usr/local/bin/rapidraw

# Make it executable
RUN chmod +x /usr/local/bin/rapidraw

# Copy any .deb packages if they were created
COPY --from=builder /app/src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb /tmp/ || true

# Expose port (adjust based on your app's configuration)
EXPOSE 3000

# Set display for GUI applications
ENV DISPLAY=:0

# Run the application
CMD ["/usr/local/bin/rapidraw"]
