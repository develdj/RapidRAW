# CUDA-OPTIMIZED RAPIDRAW BUILD FOR JETSON AGX ORIN
# Complete standalone Dockerfile - no external configs needed
# CUDA 12.8 + GPU Acceleration + VNC Remote Desktop

# Stage 1: Build environment with CUDA support
FROM dustynv/cuda:12.8-devel-ubuntu24.04 AS builder

# Install build dependencies with GPU support
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build tools
    build-essential cmake ninja-build pkg-config \
    clang-18 lld-18 ccache \
    # Rust dependencies
    curl ca-certificates \
    # GUI dependencies
    libwebkit2gtk-4.1-dev \
    libgtk-3-dev \
    libayatana-appindicator3-dev \
    librsvg2-dev \
    # Audio/Video
    libasound2-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    # GPU libraries
    libvulkan-dev \
    libxkbcommon-dev \
    libwayland-dev \
    # Git for dependencies
    git \
    && rm -rf /var/lib/apt/lists/*

# Set performance-oriented build environment
ENV CC=clang-18 \
    CXX=clang++-18 \
    LD=lld-18 \
    RUSTFLAGS="-C target-cpu=cortex-a78 -C opt-level=3 -C lto=thin" \
    CARGO_PROFILE_RELEASE_OPT_LEVEL=3 \
    CARGO_PROFILE_RELEASE_LTO="thin" \
    CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
ENV PATH="/root/.cargo/bin:${PATH}"

# Add ARM64 target
RUN rustup target add aarch64-unknown-linux-gnu

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

# Install Tauri CLI
RUN cargo install tauri-cli --locked

WORKDIR /app
COPY . .

# Install frontend dependencies
RUN npm ci --prefer-offline --no-audit

# Build RapidRAW
RUN npm run tauri build -- --target aarch64-unknown-linux-gnu

# Stage 2: Runtime with CUDA and Remote Desktop
FROM dustynv/cuda:12.8-runtime-ubuntu24.04

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Desktop environment
    xfce4 xfce4-terminal dbus-x11 \
    # RapidRAW runtime
    libwebkit2gtk-4.1-0 \
    libgtk-3-0 \
    libayatana-appindicator3-1 \
    librsvg2-2 \
    libasound2t64 \
    libgstreamer1.0-0 \
    libgstreamer-plugins-base1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    # Vulkan runtime
    libvulkan1 \
    mesa-vulkan-drivers \
    # VNC server
    tigervnc-standalone-server \
    tigervnc-common \
    novnc \
    websockify \
    # System tools
    supervisor \
    curl \
    sudo \
    net-tools \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create user
RUN useradd -m -s /bin/bash -G sudo,video,render ai && \
    echo "ai:ai" | chpasswd && \
    echo "ai ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Create directories
RUN mkdir -p /home/ai/Pictures /home/ai/.vnc /var/log/supervisor && \
    chown -R ai:ai /home/ai

# Copy RapidRAW binary
COPY --from=builder /app/src-tauri/target/aarch64-unknown-linux-gnu/release/RapidRAW /usr/local/bin/rapidraw
RUN chmod +x /usr/local/bin/rapidraw

# Configure VNC as user ai
USER ai
WORKDIR /home/ai

# VNC configuration
RUN mkdir -p /home/ai/.vnc && \
    echo "" | vncpasswd -f > /home/ai/.vnc/passwd && \
    chmod 600 /home/ai/.vnc/passwd && \
    echo "SecurityTypes=None" > /home/ai/.vnc/config

# XFCE startup script
RUN echo '#!/bin/sh\n\
unset SESSION_MANAGER\n\
unset DBUS_SESSION_BUS_ADDRESS\n\
xrdb $HOME/.Xresources\n\
xsetroot -solid grey\n\
export XKL_XMODMAP_DISABLE=1\n\
export QT_X11_NO_MITSHM=1\n\
export WGPU_BACKEND=vulkan\n\
startxfce4 &' > /home/ai/.vnc/xstartup && \
    chmod +x /home/ai/.vnc/xstartup

# Desktop shortcut
RUN mkdir -p /home/ai/Desktop /home/ai/.config/autostart && \
    echo '[Desktop Entry]\n\
Version=1.0\n\
Type=Application\n\
Name=RapidRAW\n\
Comment=GPU-Accelerated RAW Photo Editor\n\
Exec=/usr/local/bin/rapidraw\n\
Path=/home/ai/Pictures\n\
Icon=applications-graphics\n\
Terminal=false\n\
Categories=Graphics;Photography;' > /home/ai/Desktop/RapidRAW.desktop && \
    chmod +x /home/ai/Desktop/RapidRAW.desktop && \
    cp /home/ai/Desktop/RapidRAW.desktop /home/ai/.config/autostart/

# Switch back to root for supervisor
USER root

# Single supervisor configuration - embedded in Dockerfile
RUN echo '[supervisord]\n\
nodaemon=true\n\
user=root\n\
logfile=/var/log/supervisor/supervisord.log\n\
pidfile=/var/run/supervisord.pid\n\
childlogdir=/var/log/supervisor\n\
\n\
[program:xvnc]\n\
command=/bin/sh -c "rm -rf /tmp/.X1-lock /tmp/.X11-unix/X1 2>/dev/null; exec sudo -u ai /usr/bin/vncserver :1 -geometry 1920x1080 -depth 24 -SecurityTypes None -localhost no -fg"\n\
autorestart=true\n\
user=root\n\
priority=100\n\
stdout_logfile=/var/log/supervisor/xvnc.out.log\n\
stderr_logfile=/var/log/supervisor/xvnc.err.log\n\
environment=USER="ai",HOME="/home/ai"\n\
\n\
[program:websockify]\n\
command=/bin/sh -c "sleep 5 && websockify --web=/usr/share/novnc/ 6080 localhost:5901"\n\
autorestart=true\n\
user=root\n\
priority=200\n\
stdout_logfile=/var/log/supervisor/websockify.out.log\n\
stderr_logfile=/var/log/supervisor/websockify.err.log' > /etc/supervisor/conf.d/rapidraw.conf

# Startup script
RUN echo '#!/bin/bash\n\
echo "Starting RapidRAW CUDA Remote Desktop..."\n\
\n\
# Ensure correct permissions\n\
chown -R ai:ai /home/ai\n\
chmod -R 755 /home/ai/.vnc\n\
\n\
# Clean any stale locks\n\
rm -rf /tmp/.X*-lock /tmp/.X11-unix/* 2>/dev/null\n\
\n\
# Start supervisor\n\
exec /usr/bin/supervisord -c /etc/supervisor/supervisord.conf' > /start.sh && \
    chmod +x /start.sh

# Environment variables
ENV NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=all \
    WGPU_BACKEND=vulkan \
    USER=ai \
    HOME=/home/ai \
    DISPLAY=:1

# Ports
EXPOSE 5901 6080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:6080/ || exit 1

# Start
CMD ["/start.sh"]
